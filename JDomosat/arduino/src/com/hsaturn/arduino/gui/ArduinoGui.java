/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hsaturn.arduino.gui;

import com.hsaturn.utils.Rectangles;
import com.hsaturn.arduino.hardware.Arduino;
import com.hsaturn.arduino.hardware.Module;
import com.hsaturn.arduino.widgets.Widget;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.ArrayList;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;

/**
 *
 * @author hsaturn
 */
public class ArduinoGui extends javax.swing.JPanel {

	private final int gap_x = 3;
	private final int gap_y = 3;
	private final transient ArrayList<Widget> widgets = new ArrayList<>();
	public Rectangle rect;	/* User object used for placement */


	/**
	 * Creates new form ArduinoGui
	 */
	public ArduinoGui() {
		initComponents();

		panWidgets.addComponentListener(new ComponentAdapter() {
			@Override
			public void componentResized(ComponentEvent evt) {
				reorderWidgets();
			}
		});
	}

	public void setArduino(Arduino arduino) {
		System.out.println("Opening Arduino GUI");
		if (arduino == null) {
			return;
		}
		for (Module module : arduino.modules) {
			addModule(module);
		}
	}

	/**
	 *
	 * @param m
	 */
	public void addModule(Module m) {
		System.out.println("  adding module " + m.getModuleIdentifier());
		// @TODO check if panel exists in gui
		Widget new_widgets[] = Widget.factory(m);
		for (Widget widget : new_widgets) {
			if (widget != null) {
				widgets.add(widget);
			}
		}
		updatePositions();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panWidgets = new javax.swing.JPanel();

        panWidgets.setLayout(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panWidgets, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panWidgets, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel panWidgets;
    // End of variables declaration//GEN-END:variables

	/*private void updatePositions() {
	 // 1 contruires une liste de rectangles
	 // 2 lancer un algorithm de packing
		
	 // 1
	 Rectangles rects=new Rectangles();
	 for (Widget widget : widgets) {
	 Dimension size = widget.getDimension();
	 if (size == null) {
	 size = new Dimension(100,100);
	 }
	 Rectangle r = new Rectangle(size);
	 widget.rect = r;
	 rects.add(r);
	 }
		
	 // 2 - Lancer l'algorithme
	 Rectangle area = new Rectangle(panWidgets.getVisibleRect());
	 if (area.width > 10) {
	 rectangles.add(area);
	 } else {
	 rectangles.add(new Rectangle(0, 0, 1000, 1000));
	 }
		
	 }*/
	private void updatePositions2() {
		for (Widget widget : widgets) {
			if (widget.positionned == false) {
				findPosition(widget);
			}
		}
	}

	private void updatePositions() {
		System.out.println("updatePosisions");
		for (Widget widget : widgets) {
			widget.positionned = false;
		}

		for (;;) {
			Widget largest;
			int largest_area = 0;
			largest = null;
			for (Widget widget : widgets) {
				if (widget.positionned == false) {
					Dimension size;
					size = widget.getDimension();
					if (size == null) {
						if (largest == null) {
							largest = widget;
						}
					} else {
						int area = size.width * size.height;
						if (area > largest_area) {
							largest = widget;
							largest_area = area;
						}
					}
				}
			}
			if (largest == null) {
				break;
			}
			System.out.println("  findPos(" + largest.getName()+")");
			findPosition(largest);
		}
	}

	private void findPosition(Widget widget) {
		Color c = widget.getBackground();
		widget.setBackground(Color.red);
		widget.repaint();
		Dimension size = widget.getDimension();
		if (size == null) {
			return;
		}
		size.width += gap_x;
		size.height += gap_y;

		// Ajouter le rectangle correspondant à this (ArduinoGui complet)
		Rectangles rectangles = new Rectangles();
		Rectangle area = new Rectangle(panWidgets.getVisibleRect());
		if (area.width > 10) {
			rectangles.add(area);
		} else {
			rectangles.add(new Rectangle(0, 0, 1000, 1000));
		}
		// Découper la zone selon les panels déja positionnés
		for (Widget other : widgets) {
			if (other != widget && other.positionned) {
				rectangles.split(other.rect);
			}
		}

		// Trouver la meilleur place pour le ptit nouveau
		Rectangle prect = new Rectangle(0, 0, size.width, size.height);
		Rectangle rect = rectangles.findRoomFor(prect);
		if (rect == null) {
			rect = new Rectangle(0, 0, size.width, size.height);
		}
		rect.setSize(size);
		// Rendre le panel visible.
		widget.positionned = true;
		widget.rect = rect;
		widget.setBounds(rect);
		panWidgets.add(widget);
		widget.setBackground(c);
		widget.repaint();
	}

	private void reorderWidgets() {
		for (Widget widget : widgets) {
			widget.positionned = false;
		}
		updatePositions();
	}

}
