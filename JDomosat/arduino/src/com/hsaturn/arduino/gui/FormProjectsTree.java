/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hsaturn.arduino.gui;

import com.hsaturn.arduino.document.ArduinoProject;
import com.hsaturn.arduino.document.ProjectList;
import java.util.Enumeration;
import java.util.List;
import com.hsaturn.utils.Observable;
import com.hsaturn.utils.Observer;
import java.util.Iterator;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
		dtd = "-//com.hsaturn.arduino.gui//Projects//EN",
		autostore = false
)
@TopComponent.Description(
		preferredID = "ProjectsTopComponent",
		//iconBase="SET/PATH/TO/ICON/HERE", 
		persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "com.hsaturn.arduino.gui.ProjectsTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
		displayName = "#CTL_ProjectsAction",
		preferredID = "ProjectsTopComponent"
)
@Messages({
	"CTL_ProjectsAction=Projects",
	"CTL_ProjectsTopComponent=Projects Window",
	"HINT_ProjectsTopComponent=This is a Projects window"
})
public final class FormProjectsTree extends TopComponent implements Observer {

	private void updateTree() {
		ProjectTreeNode root;
		Object oRoot = treeProjects.getModel().getRoot();
		if (oRoot instanceof ProjectTreeNode) {
			root = (ProjectTreeNode) oRoot;
		} else {
			root = new ProjectTreeNode("root", null);
		}

		List<ArduinoProject> lst = ProjectList.getInstance().getProjectList();
		if (lst != null) // for each plugin name...
		{
			for (ArduinoProject project : lst) {

				String sSplit = "Projects.$PNAME";
				String[] splitName = sSplit.split("\\.");

				ProjectTreeNode parent = root;
				for (int n = 0; n < splitName.length; n++) {
					String s = splitName[n];
					if (s.equals("$PNAME")) {
						s = project.name();
					}
					if (parent.hasChild(s)) {
						// the parent node exists, so it doesn't need to be created. Store the node as 'parent' to use in the next loop run
						parent = parent.getChild(s);
					} else {
						System.out.println("FormProjects, Creating node " + s);
						// the node doesn't exist, so create it. Then set it as 'parent' for use by the next loop run
						ProjectTreeNode child = new ProjectTreeNode(s, project) {
						};
						if (parent != null) {
							parent.addChild(child);
						}
						parent = child;
					}
				}
			}
		}
		DefaultTreeModel o = new DefaultTreeModel(root);
		treeProjects.setRootVisible(false);
		treeProjects.setModel(o);
	}

	public FormProjectsTree() {
		initComponents();
		treeProjects.setEditable(true);
		setName(Bundle.CTL_ProjectsTopComponent());
		setToolTipText(Bundle.HINT_ProjectsTopComponent());

		System.out.println("============ Opening Projects Tops");

		updateTree();

		ProjectList.getInstance().addObserver(this);

		ProjectTreeMouseListener mouseListener = new ProjectTreeMouseListener(popupProject);
		treeProjects.addMouseListener(mouseListener);
		treeProjects.getModel().addTreeModelListener(new ProjectTreeModelListener());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupProject = new javax.swing.JPopupMenu();
        mnuRename = new javax.swing.JMenuItem();
        mnuOpenConsole = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeProjects = new javax.swing.JTree();

        org.openide.awt.Mnemonics.setLocalizedText(mnuRename, org.openide.util.NbBundle.getMessage(FormProjectsTree.class, "FormProjectsTree.mnuRename.text")); // NOI18N
        mnuRename.setFocusable(true);
        mnuRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRenameActionPerformed(evt);
            }
        });
        popupProject.add(mnuRename);

        org.openide.awt.Mnemonics.setLocalizedText(mnuOpenConsole, org.openide.util.NbBundle.getMessage(FormProjectsTree.class, "FormProjectsTree.mnuOpenConsole.text")); // NOI18N
        mnuOpenConsole.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnuOpenConsoleMouseClicked(evt);
            }
        });
        mnuOpenConsole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenConsoleActionPerformed(evt);
            }
        });
        popupProject.add(mnuOpenConsole);

        treeProjects.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeProjectsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(treeProjects);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mnuOpenConsoleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuOpenConsoleMouseClicked

    }//GEN-LAST:event_mnuOpenConsoleMouseClicked

    private void mnuOpenConsoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenConsoleActionPerformed
		Object obj = treeProjects.getLastSelectedPathComponent();
		if (obj instanceof ProjectTreeNode) {
			ProjectTreeNode node = (ProjectTreeNode) obj;

			ArduinoProject project = null;
			for (ArduinoProject one : ProjectList.getInstance().getProjectList()) {
				if (one.getFileName() == node.getText()) {
					project = one;
					break;
				}
			}

			if (project != null) {
				CustomView win = new CustomView(PERSISTENCE_NEVER, node.getProject().name() + " console...");
				FormConsole con = new FormConsole();
				con.init(project);
				// ??? con.addFocusListener( new FocusListener(node.getProject()));
				win.add(con);
				win.open();
			}
		} else {
			System.out.println("FormProjectsTree: not a ProjectTreeNode : " + evt.getSource().getClass());
		}
		System.out.println("FormProjectsTree: mnuOpenConsole");
    }//GEN-LAST:event_mnuOpenConsoleActionPerformed

    private void mnuRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRenameActionPerformed
		ProjectTreeNode node = (ProjectTreeNode) treeProjects.getLastSelectedPathComponent();
		if (treeProjects.getSelectionRows().length == 1) {
			treeProjects.startEditingAtPath(treeProjects.getPathForRow(treeProjects.getSelectionRows()[0]));
		}
    }//GEN-LAST:event_mnuRenameActionPerformed

    private void treeProjectsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeProjectsValueChanged
    }//GEN-LAST:event_treeProjectsValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mnuOpenConsole;
    private javax.swing.JMenuItem mnuRename;
    private javax.swing.JPopupMenu popupProject;
    private javax.swing.JTree treeProjects;
    // End of variables declaration//GEN-END:variables
	@Override
	public void componentOpened() {
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed() {
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	@Override
	public void update(Observable o, Object arg) {
		if (arg instanceof ArduinoProject) {
			ArduinoProject project = (ArduinoProject) arg;
			selectProject(project);
		} else {
			updateTree();
		}
	}

	public void selectProject(ArduinoProject project) {
		ProjectTreeNode node = searchNode(project);
		if (node != null) {
			TreeNode[] nodes = ((DefaultTreeModel) treeProjects.getModel()).getPathToRoot(node);
			TreePath tpath = new TreePath(nodes);
			treeProjects.scrollPathToVisible(tpath);
			treeProjects.setSelectionPath(tpath);

		}

	}

	private ProjectTreeNode searchNode(ArduinoProject project) {
		ProjectTreeNode root;
		if (treeProjects.getModel() != null) {
			if (treeProjects.getModel().getRoot() instanceof ProjectTreeNode) {
				root = (ProjectTreeNode) treeProjects.getModel().getRoot();
				ProjectTreeNode node;

				Enumeration enumeration = root.breadthFirstEnumeration();
				while (enumeration.hasMoreElements()) {

					node = (ProjectTreeNode) enumeration.nextElement();
					if (node.getProject() == project) {
						return node;
					}
				}
			}
		}

		//tree node with string node found return null 
		return null;
	}

}
